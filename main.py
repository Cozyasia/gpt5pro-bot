# main.py
import os
import re
import json
import logging
from typing import Optional, Tuple

import httpx
from telegram import Update, MessageEntity
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)

# ====== –õ–û–ì–ò ======
LOG_LEVEL = os.environ.get("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=LOG_LEVEL,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
log = logging.getLogger("gpt5pro-bot")

# ====== ENV ======
BOT_TOKEN = os.environ["BOT_TOKEN"]
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY", "")
DEEPGRAM_API_KEY = os.environ.get("DEEPGRAM_API_KEY", "")
TAVILY_API_KEY = os.environ.get("TAVILY_API_KEY")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
ALWAYS_BROWSE = os.environ.get("ALWAYS_BROWSE", "0") == "1"
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

# ====== –ö–õ–ò–ï–ù–¢–´ ======
HTTP_TIMEOUT = httpx.Timeout(60.0, connect=30.0)
http = httpx.AsyncClient(timeout=HTTP_TIMEOUT)

# -------- OpenAI (—á—Ç–µ–Ω–∏–µ, –≤–∏–∑–∏–æ–Ω, –æ—Ç–≤–µ—Ç—ã) --------
# –ò—Å–ø–æ–ª—å–∑—É–µ–º Chat Completions –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏
OPENAI_BASE = os.environ.get("OPENAI_BASE", "https://api.openai.com/v1")
OPENAI_MODEL = os.environ.get("OPENAI_MODEL", "gpt-4o-mini")  # –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç vision

async def openai_chat(messages, temperature=0.3):
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    payload = {
        "model": OPENAI_MODEL,
        "messages": messages,
        "temperature": temperature,
    }
    r = await http.post(f"{OPENAI_BASE}/chat/completions", headers=headers, json=payload)
    r.raise_for_status()
    data = r.json()
    return data["choices"][0]["message"]["content"].strip()

async def openai_vision_describe(image_url: str, user_prompt: str = "–û–ø–∏—à–∏, —á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –ò–∑–≤–ª–µ–∫–∏ –≤–∏–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç."):
    if not OPENAI_API_KEY:
        return "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–ª—é—á OpenAI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    messages = [{
        "role": "user",
        "content": [
            {"type": "text", "text": user_prompt},
            {"type": "image_url", "image_url": {"url": image_url}}
        ],
    }]
    payload = {"model": OPENAI_MODEL, "messages": messages, "temperature": 0.2}
    r = await http.post(f"{OPENAI_BASE}/chat/completions", headers=headers, json=payload)
    r.raise_for_status()
    data = r.json()
    return data["choices"][0]["message"]["content"].strip()

# -------- Deepgram (ASR) --------
DEEPGRAM_API = "https://api.deepgram.com/v1/listen"
# –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å prerecord URL (Deepgram —Å–∞–º —Ç—è–Ω–µ—Ç —Ñ–∞–π–ª –ø–æ URL)
async def deepgram_transcribe(file_url: str, language_hint: Optional[str] = None) -> Optional[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏.
    """
    if not DEEPGRAM_API_KEY:
        log.warning("DEEPGRAM_API_KEY is not set.")
        return None

    params = {
        "model": "nova-2",          # –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
        "smart_format": "true",     # –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è/—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        "punctuate": "true",
    }
    if language_hint:
        params["language"] = language_hint  # –Ω–∞–ø—Ä–∏–º–µ—Ä "ru"; –º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å ‚Äî –∞–≤—Ç–æ

    headers = {
        "Authorization": f"Token {DEEPGRAM_API_KEY}",
        "Content-Type": "application/json",
    }
    body = {"url": file_url}

    try:
        r = await http.post(DEEPGRAM_API, params=params, headers=headers, json=body)
        if r.status_code >= 400:
            log.error("Deepgram error %s: %s", r.status_code, r.text)
            return None
        data = r.json()
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ—Å—Ç–∞–µ–º —Ç–µ–∫—Å—Ç
        alt = (
            data.get("results", {})
                .get("channels", [{}])[0]
                .get("alternatives", [{}])[0]
        )
        transcript = alt.get("transcript", "").strip()
        return transcript or None
    except Exception as e:
        log.exception("Deepgram request failed: %s", e)
        return None

# ====== –£–¢–ò–õ–ò–¢–´ ======

HELLO_RE = re.compile(r"^(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|hi|hello|–¥–æ–±—Ä—ã–π\s+(–¥–µ–Ω—å|–≤–µ—á–µ—Ä|—É—Ç—Ä–æ))[\s!,.]*$", re.I)
SIMPLE_THANKS = re.compile(r"(—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä—é)\b", re.I)

CAPS_RE = re.compile(
    r"(–º–æ–∂–µ—à—å|—É–º–µ–µ—à—å|—É–º–µ–µ—Ç|—Å–ø–æ—Å–æ–±–µ–Ω|–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å).*(—Ñ–æ—Ç–æ|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏|–∫–∞—Ä—Ç–∏–Ω|–≤–∏–¥–µ–æ|–∞—É–¥–∏–æ|–≥–æ–ª–æ—Å|voice)",
    re.I
)

FACTY_RE = re.compile(
    r"(–∫–æ–≥–¥–∞|—Å–∫–æ–ª—å–∫–æ|–∫—É—Ä—Å|–Ω–æ–≤–æ—Å—Ç|—á—Ç–æ\s—Ç–∞–∫–æ–µ|–∫—Ç–æ\s—Ç–∞–∫–æ–π|–¥–∞—Ç–∞|—Ü–µ–Ω–∞|–ø—Ä–æ–≥–Ω–æ–∑|–æ–±—ä—è—Å–Ω–∏).*",
    re.I
)

def is_simple_greeting(text: str) -> bool:
    return bool(HELLO_RE.match(text.strip()))

def is_capability_question(text: str) -> bool:
    return bool(CAPS_RE.search(text))

def likely_needs_web(text: str) -> bool:
    return ALWAYS_BROWSE or bool(FACTY_RE.search(text))

def user_lang(update: Update) -> str:
    code = "ru"
    try:
        code = (update.effective_user.language_code or "ru").split("-")[0]
    except Exception:
        pass
    return code or "ru"

async def telegram_file_url(context: ContextTypes.DEFAULT_TYPE, file_id: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π URL —Ñ–∞–π–ª–∞ Telegram:
    https://api.telegram.org/file/bot<token>/<file_path>
    """
    tg_file = await context.bot.get_file(file_id)
    # tg_file.file_path —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –≤–∏–¥–∞ `voice/file_123.oga`
    return f"https://api.telegram.org/file/bot{BOT_TOKEN}/{tg_file.file_path}"

# ====== –ë–ê–ó–û–í–´–ï –û–¢–í–ï–¢–´ ======

START_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤. –ù–∞–ø–∏—à–∏ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.\n\n"
    "–ü–æ–¥—Å–∫–∞–∑–∫–∏:\n"
    "‚Ä¢ –Ø –∏—â—É —Å–≤–µ–∂—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –¥–ª—è —Ñ–∞–∫—Ç–æ–≤ –∏ –¥–∞—Ç, –∫–æ–≥–¥–∞ —ç—Ç–æ –Ω—É–∂–Ω–æ.\n"
    "‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: ¬´–ö–æ–≥–¥–∞ –≤—ã–π–¥–µ—Ç GTA 6?¬ª, ¬´–ö—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞ —Å–µ–π—á–∞—Å –∏ –ø—Ä–æ–≥–Ω–æ–∑¬ª, "
    "¬´–ù–∞–π–¥–∏ —É—á–µ–±–Ω–∏–∫ –∞–ª–≥–µ–±—Ä—ã 11 –∫–ª–∞—Å—Å (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏)¬ª, ¬´–ù–æ–≤–æ—Å—Ç–∏ –ø–æ ‚Ä¶?¬ª\n"
    "‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ ‚Äî –æ–ø–∏—à—É –∏ –∏–∑–≤–ª–µ–∫—É —Ç–µ–∫—Å—Ç.\n"
    "‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –≤–∏–¥–µ–æ ‚Äî —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å –∏ –æ—Ç–≤–µ—á—É –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é."
)

CAPABILITIES_TEXT = (
    "–î–∞, —É–º–µ—é:\n"
    "‚Ä¢ –§–æ—Ç–æ/–∫–∞—Ä—Ç–∏–Ω–∫–∏ ‚Äî –æ–ø–∏—à—É, –∏–∑–≤–ª–µ–∫—É —Ç–µ–∫—Å—Ç (OCR) –∏ —É—Ç–æ—á–Ω—é –¥–µ—Ç–∞–ª–∏.\n"
    "‚Ä¢ –ì–æ–ª–æ—Å/–∞—É–¥–∏–æ ‚Äî —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å –∏ –æ—Ç–≤–µ—á—É –ø–æ —Å–º—ã—Å–ª—É (Deepgram).\n"
    "‚Ä¢ –í–∏–¥–µ–æ ‚Äî –∏–∑–≤–ª–µ–∫—É –∑–≤—É–∫–æ–≤—É—é –¥–æ—Ä–æ–∂–∫—É —á–µ—Ä–µ–∑ Deepgram –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç.\n\n"
    "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Ñ–∞–π–ª (—Ñ–æ—Ç–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ, –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ)."
)

# ====== –•–ï–ù–î–õ–ï–†–´ ======

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(START_TEXT)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    lang = user_lang(update)

    # 1) –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è/–ø—Ä–æ—Å—Ç–æ–µ –æ–±—â–µ–Ω–∏–µ ‚Äî –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
    if is_simple_greeting(text):
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?")
        return

    # 2) –í–æ–ø—Ä–æ—Å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
    if is_capability_question(text):
        await update.message.reply_text(CAPABILITIES_TEXT)
        return

    # 3) ‚Äú–°–ø–∞—Å–∏–±–æ‚Äù
    if SIMPLE_THANKS.search(text):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä –ß–µ–º –µ—â—ë –ø–æ–º–æ—á—å?")
        return

    # 4) –û—Ç–≤–µ—Ç: –ª–∏–±–æ –æ—Ñ—Ñ–ª–∞–π–Ω, –ª–∏–±–æ —Å –ø–æ—Ö–æ–¥–æ–º –≤ —Å–µ—Ç—å (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    if likely_needs_web(text):
        # –ú–∏–Ω–∏-–∞–≥–µ–Ω—Ç: —Å–ø—Ä–æ—Å–∏–º –º–æ–¥–µ–ª—å, –∫–∞–∫ –ª—É—á—à–µ –æ—Ç–≤–µ—Ç–∏—Ç—å, –∏ –ø–æ–ø—Ä–æ—Å–∏–º —Å–æ—Å–ª–∞—Ç—å—Å—è –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        prompt = (
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª:\n"
            f"{text}\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏ —Å–≤–µ–∂—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ (–∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏ –Ω–∞–¥—ë–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏), "
            "–∑–∞—Ç–µ–º –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –æ—Ç–≤–µ—Ç—å –ø–æ-—Ä—É—Å—Å–∫–∏ –∏ –ø—Ä–∏–≤–µ–¥–∏ 2‚Äì5 —Å—Å—ã–ª–æ–∫ –≤–Ω–∏–∑—É."
        )
    else:
        prompt = (
            "–û—Ç–≤–µ—Ç—å –ø–æ-—Ä—É—Å—Å–∫–∏ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π/–Ω–æ–≤–æ—Å—Ç–Ω–æ–π, "
            "—Å–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞—Ç—å –∏ —É—Ç–æ—á–Ω–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ."
            f"\n\n–í–æ–ø—Ä–æ—Å: {text}"
        )

    try:
        reply = await openai_chat([
            {"role": "system", "content": "–¢—ã –≤–µ–∂–ª–∏–≤—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."},
            {"role": "user", "content": prompt},
        ])
    except Exception as e:
        log.exception("OpenAI text error: %s", e)
        reply = "–ò–∑–≤–∏–Ω–∏, —Å–µ–π—á–∞—Å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
    await update.message.reply_text(reply, disable_web_page_preview=False)

# ----- –§–æ—Ç–æ (Vision) -----
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ø—Ä–µ–≤—å—é
        photo = update.message.photo[-1]
        url = await telegram_file_url(context, photo.file_id)
        desc = await openai_vision_describe(url)
        await update.message.reply_text(desc, disable_web_page_preview=True)
    except Exception as e:
        log.exception("Vision/photo failed: %s", e)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")

# ----- –ì–æ–ª–æ—Å (voice) / –∞—É–¥–∏–æ (audio) / –≤–∏–¥–µ–æ (video) / –≤–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫–∞ (video_note) -----

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # voice: .ogg (opus)
    voice = update.message.voice
    await transcribe_and_answer(update, context, voice.file_id, hint_lang=user_lang(update))

async def handle_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    audio = update.message.audio  # mp3/m4a/wav‚Ä¶
    await transcribe_and_answer(update, context, audio.file_id, hint_lang=user_lang(update))

async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    video = update.message.video  # mp4/mov‚Ä¶
    await transcribe_and_answer(update, context, video.file_id, hint_lang=user_lang(update))

async def handle_video_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    v = update.message.video_note  # –∫—Ä—É–∂–æ—á–µ–∫
    await transcribe_and_answer(update, context, v.file_id, hint_lang=user_lang(update))

async def transcribe_and_answer(update: Update, context: ContextTypes.DEFAULT_TYPE, file_id: str, hint_lang: str = "ru"):
    try:
        url = await telegram_file_url(context, file_id)
        log.info("Transcribing via Deepgram: %s", url)
        text = await deepgram_transcribe(url, language_hint=hint_lang)
        if not text:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return

        # –û—Ç–≤–µ—á–∞–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        user_q = text.strip()
        pre = f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: ¬´{user_q}¬ª.\n\n"
        needs_web = likely_needs_web(user_q)
        if needs_web:
            prompt = (
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–∏–∫—Ç–æ–≤–∞–ª –≤–æ–ø—Ä–æ—Å. –ù–∞–π–¥–∏ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏ "
                "–æ—Ç–≤–µ—Ç—å –ø–æ-—Ä—É—Å—Å–∫–∏ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –í –∫–æ–Ω—Ü–µ –¥–∞–π 2‚Äì5 —Å—Å—ã–ª–æ–∫-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.\n\n"
                f"–í–æ–ø—Ä–æ—Å: {user_q}"
            )
        else:
            prompt = (
                "–û—Ç–≤–µ—Ç—å –ø–æ-—Ä—É—Å—Å–∫–∏ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.\n\n"
                f"–í–æ–ø—Ä–æ—Å: {user_q}"
            )

        try:
            answer = await openai_chat([
                {"role": "system", "content": "–¢—ã –≤–µ–∂–ª–∏–≤—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."},
                {"role": "user", "content": prompt},
            ])
        except Exception as e:
            log.exception("OpenAI after ASR error: %s", e)
            answer = "–ü—Ä–∏–Ω—è–ª —Ç–µ–∫—Å—Ç, –Ω–æ –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."

        await update.message.reply_text(pre + answer, disable_web_page_preview=False)
    except Exception as e:
        log.exception("ASR flow failed: %s", e)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

# ====== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ======

def build_app() -> Application:
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))

    # –ú–µ–¥–∏–∞
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    app.add_handler(MessageHandler(filters.AUDIO, handle_audio))
    app.add_handler(MessageHandler(filters.VIDEO, handle_video))
    app.add_handler(MessageHandler(filters.VIDEO_NOTE, handle_video_note))

    # –¢–µ–∫—Å—Ç –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª –º–µ–¥–∏–∞)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    return app

async def on_startup(app: Application):
    if WEBHOOK_URL:
        await app.bot.set_webhook(WEBHOOK_URL)
        log.info("Webhook set to %s", WEBHOOK_URL)
    else:
        log.info("Running in long-polling mode")

def main():
    app = build_app()
    if WEBHOOK_URL:
        # Render –æ–±—ã—á–Ω–æ –∑–∞ –ø—Ä–æ–∫—Å–∏ ‚Äî —Å–ª—É—à–∞–µ–º 0.0.0.0:10000 (–∏–ª–∏ –∫–∞–∫ –≤ Render)
        port = int(os.environ.get("PORT", "10000"))
        app.run_webhook(listen="0.0.0.0", port=port, webhook_url=WEBHOOK_URL, drop_pending_updates=True)
    else:
        app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
